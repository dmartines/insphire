[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/reactive-dict/packages/reactive-dict.js                                    //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n(function(){                                                                           // 1\n                                                                                       // 2\n//////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                              //     // 4\n// packages/reactive-dict/reactive-dict.js                                      //     // 5\n//                                                                              //     // 6\n//////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                //     // 8\n// XXX come up with a serialization method which canonicalizes object key       // 1   // 9\n// order, which would allow us to use objects as values for equals.             // 2   // 10\nvar stringify = function (value) {                                              // 3   // 11\n  if (value === undefined)                                                      // 4   // 12\n    return 'undefined';                                                         // 5   // 13\n  return EJSON.stringify(value);                                                // 6   // 14\n};                                                                              // 7   // 15\nvar parse = function (serialized) {                                             // 8   // 16\n  if (serialized === undefined || serialized === 'undefined')                   // 9   // 17\n    return undefined;                                                           // 10  // 18\n  return EJSON.parse(serialized);                                               // 11  // 19\n};                                                                              // 12  // 20\n                                                                                // 13  // 21\nvar changed = function (v) {                                                    // 14  // 22\n  v && v.changed();                                                             // 15  // 23\n};                                                                              // 16  // 24\n                                                                                // 17  // 25\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName             // 18  // 26\nReactiveDict = function (dictName) {                                            // 19  // 27\n  // this.keys: key -> value                                                    // 20  // 28\n  if (dictName) {                                                               // 21  // 29\n    if (typeof dictName === 'string') {                                         // 22  // 30\n      // the normal case, argument is a string name.                            // 23  // 31\n      // _registerDictForMigrate will throw an error on duplicate name.         // 24  // 32\n      ReactiveDict._registerDictForMigrate(dictName, this);                     // 25  // 33\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};               // 26  // 34\n      this.name = dictName;                                                     // 27  // 35\n    } else if (typeof dictName === 'object') {                                  // 28  // 36\n      // back-compat case: dictName is actually migrationData                   // 29  // 37\n      this.keys = dictName;                                                     // 30  // 38\n    } else {                                                                    // 31  // 39\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);            // 32  // 40\n    }                                                                           // 33  // 41\n  } else {                                                                      // 34  // 42\n    // no name given; no migration will be performed                            // 35  // 43\n    this.keys = {};                                                             // 36  // 44\n  }                                                                             // 37  // 45\n                                                                                // 38  // 46\n  this.allDeps = new Tracker.Dependency;                                        // 39  // 47\n  this.keyDeps = {}; // key -> Dependency                                       // 40  // 48\n  this.keyValueDeps = {}; // key -> Dependency                                  // 41  // 49\n};                                                                              // 42  // 50\n                                                                                // 43  // 51\n_.extend(ReactiveDict.prototype, {                                              // 44  // 52\n  // set() began as a key/value method, but we are now overloading it           // 45  // 53\n  // to take an object of key/value pairs, similar to backbone                  // 46  // 54\n  // http://backbonejs.org/#Model-set                                           // 47  // 55\n                                                                                // 48  // 56\n  set: function (keyOrObject, value) {                                          // 49  // 57\n    var self = this;                                                            // 50  // 58\n                                                                                // 51  // 59\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {           // 52  // 60\n      // Called as `dict.set({...})`                                            // 53  // 61\n      self._setObject(keyOrObject);                                             // 54  // 62\n      return;                                                                   // 55  // 63\n    }                                                                           // 56  // 64\n    // the input isn't an object, so it must be a key                           // 57  // 65\n    // and we resume with the rest of the function                              // 58  // 66\n    var key = keyOrObject;                                                      // 59  // 67\n                                                                                // 60  // 68\n    value = stringify(value);                                                   // 61  // 69\n                                                                                // 62  // 70\n    var keyExisted = _.has(self.keys, key);                                     // 63  // 71\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';         // 64  // 72\n    var isNewValue = (value !== oldSerializedValue);                            // 65  // 73\n                                                                                // 66  // 74\n    self.keys[key] = value;                                                     // 67  // 75\n                                                                                // 68  // 76\n    if (isNewValue || !keyExisted) {                                            // 69  // 77\n      self.allDeps.changed();                                                   // 70  // 78\n    }                                                                           // 71  // 79\n                                                                                // 72  // 80\n    if (isNewValue) {                                                           // 73  // 81\n      changed(self.keyDeps[key]);                                               // 74  // 82\n      if (self.keyValueDeps[key]) {                                             // 75  // 83\n        changed(self.keyValueDeps[key][oldSerializedValue]);                    // 76  // 84\n        changed(self.keyValueDeps[key][value]);                                 // 77  // 85\n      }                                                                         // 78  // 86\n    }                                                                           // 79  // 87\n  },                                                                            // 80  // 88\n                                                                                // 81  // 89\n  setDefault: function (key, value) {                                           // 82  // 90\n    var self = this;                                                            // 83  // 91\n    if (! _.has(self.keys, key)) {                                              // 84  // 92\n      self.set(key, value);                                                     // 85  // 93\n    }                                                                           // 86  // 94\n  },                                                                            // 87  // 95\n                                                                                // 88  // 96\n  get: function (key) {                                                         // 89  // 97\n    var self = this;                                                            // 90  // 98\n    self._ensureKey(key);                                                       // 91  // 99\n    self.keyDeps[key].depend();                                                 // 92  // 100\n    return parse(self.keys[key]);                                               // 93  // 101\n  },                                                                            // 94  // 102\n                                                                                // 95  // 103\n  equals: function (key, value) {                                               // 96  // 104\n    var self = this;                                                            // 97  // 105\n                                                                                // 98  // 106\n    // Mongo.ObjectID is in the 'mongo' package                                 // 99  // 107\n    var ObjectID = null;                                                        // 100\n    if (Package.mongo) {                                                        // 101\n      ObjectID = Package.mongo.Mongo.ObjectID;                                  // 102\n    }                                                                           // 103\n                                                                                // 104\n    // We don't allow objects (or arrays that might include objects) for        // 105\n    // .equals, because JSON.stringify doesn't canonicalize object key          // 106\n    // order. (We can make equals have the right return value by parsing the    // 107\n    // current value and using EJSON.equals, but we won't have a canonical      // 108\n    // element of keyValueDeps[key] to store the dependency.) You can still use        // 117\n    // \"EJSON.equals(reactiveDict.get(key), value)\".                            // 110\n    //                                                                          // 111\n    // XXX we could allow arrays as long as we recursively check that there     // 112\n    // are no objects                                                           // 113\n    if (typeof value !== 'string' &&                                            // 114\n        typeof value !== 'number' &&                                            // 115\n        typeof value !== 'boolean' &&                                           // 116\n        typeof value !== 'undefined' &&                                         // 117\n        !(value instanceof Date) &&                                             // 118\n        !(ObjectID && value instanceof ObjectID) &&                             // 119\n        value !== null) {                                                       // 120\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");             // 121\n    }                                                                           // 122\n    var serializedValue = stringify(value);                                     // 123\n                                                                                // 124\n    if (Tracker.active) {                                                       // 125\n      self._ensureKey(key);                                                     // 126\n                                                                                // 127\n      if (! _.has(self.keyValueDeps[key], serializedValue))                     // 128\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;       // 129\n                                                                                // 130\n      var isNew = self.keyValueDeps[key][serializedValue].depend();             // 131\n      if (isNew) {                                                              // 132\n        Tracker.onInvalidate(function () {                                      // 133\n          // clean up [key][serializedValue] if it's now empty, so we don't     // 134\n          // use O(n) memory for n = values seen ever                           // 135\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())        // 136\n            delete self.keyValueDeps[key][serializedValue];                     // 137\n        });                                                                     // 138\n      }                                                                         // 139\n    }                                                                           // 140\n                                                                                // 141\n    var oldValue = undefined;                                                   // 142\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                // 143\n    return EJSON.equals(oldValue, value);                                       // 144\n  },                                                                            // 145\n                                                                                // 146\n  all: function() {                                                             // 147\n    this.allDeps.depend();                                                      // 148\n    var ret = {};                                                               // 149\n    _.each(this.keys, function(value, key) {                                    // 150\n      ret[key] = parse(value);                                                  // 151\n    });                                                                         // 152\n    return ret;                                                                 // 153\n  },                                                                            // 154\n                                                                                // 155\n  clear: function() {                                                           // 156\n    var self = this;                                                            // 157\n                                                                                // 158\n    var oldKeys = self.keys;                                                    // 159\n    self.keys = {};                                                             // 160\n                                                                                // 161\n    self.allDeps.changed();                                                     // 162\n                                                                                // 163\n    _.each(oldKeys, function(value, key) {                                      // 164\n      changed(self.keyDeps[key]);                                               // 165\n      changed(self.keyValueDeps[key][value]);                                   // 166\n      changed(self.keyValueDeps[key]['undefined']);                             // 167\n    });                                                                         // 168\n                                                                                // 169\n  },                                                                            // 170\n                                                                                // 171\n  delete: function(key) {                                                       // 172\n    var self = this;                                                            // 173\n    var didRemove = false;                                                      // 174\n                                                                                // 175\n    if (_.has(self.keys, key)) {                                                // 176\n      var oldValue = self.keys[key];                                            // 177\n      delete self.keys[key];                                                    // 178\n      changed(self.keyDeps[key]);                                               // 179\n      if (self.keyValueDeps[key]) {                                             // 180\n        changed(self.keyValueDeps[key][oldValue]);                              // 181\n        changed(self.keyValueDeps[key]['undefined']);                           // 182\n      }                                                                         // 183\n      self.allDeps.changed();                                                   // 184\n      didRemove = true;                                                         // 185\n    }                                                                           // 186\n                                                                                // 187\n    return didRemove;                                                           // 188\n  },                                                                            // 189\n                                                                                // 190\n  _setObject: function (object) {                                               // 191\n    var self = this;                                                            // 192\n                                                                                // 193\n    _.each(object, function (value, key){                                       // 194\n      self.set(key, value);                                                     // 195\n    });                                                                         // 196\n  },                                                                            // 197\n                                                                                // 198\n  _ensureKey: function (key) {                                                  // 199\n    var self = this;                                                            // 200\n    if (!(key in self.keyDeps)) {                                               // 201\n      self.keyDeps[key] = new Tracker.Dependency;                               // 202\n      self.keyValueDeps[key] = {};                                              // 203\n    }                                                                           // 204\n  },                                                                            // 205\n                                                                                // 206\n  // Get a JSON value that can be passed to the constructor to                  // 207\n  // create a new ReactiveDict with the same contents as this one               // 208\n  _getMigrationData: function () {                                              // 209\n    // XXX sanitize and make sure it's JSONible?                                // 210\n    return this.keys;                                                           // 211\n  }                                                                             // 212\n});                                                                             // 213\n                                                                                // 214\n//////////////////////////////////////////////////////////////////////////////////     // 223\n                                                                                       // 224\n}).call(this);                                                                         // 225\n                                                                                       // 226\n                                                                                       // 227\n                                                                                       // 228\n                                                                                       // 229\n                                                                                       // 230\n                                                                                       // 231\n(function(){                                                                           // 232\n                                                                                       // 233\n//////////////////////////////////////////////////////////////////////////////////     // 234\n//                                                                              //     // 235\n// packages/reactive-dict/migration.js                                          //     // 236\n//                                                                              //     // 237\n//////////////////////////////////////////////////////////////////////////////////     // 238\n                                                                                //     // 239\nReactiveDict._migratedDictData = {}; // name -> data                            // 1   // 240\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                      // 2   // 241\n                                                                                // 3   // 242\nReactiveDict._loadMigratedDict = function (dictName) {                          // 4   // 243\n  if (_.has(ReactiveDict._migratedDictData, dictName))                          // 5   // 244\n    return ReactiveDict._migratedDictData[dictName];                            // 6   // 245\n                                                                                // 7   // 246\n  return null;                                                                  // 8   // 247\n};                                                                              // 9   // 248\n                                                                                // 10  // 249\nReactiveDict._registerDictForMigrate = function (dictName, dict) {              // 11  // 250\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))                            // 12  // 251\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);                // 13  // 252\n                                                                                // 14  // 253\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                // 15  // 254\n};                                                                              // 16  // 255\n                                                                                // 17  // 256\nif (Meteor.isClient && Package.reload) {                                        // 18  // 257\n  // Put old migrated data into ReactiveDict._migratedDictData,                 // 19  // 258\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                // 20  // 259\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');    // 21  // 260\n  if (migrationData && migrationData.dicts)                                     // 22  // 261\n    ReactiveDict._migratedDictData = migrationData.dicts;                       // 23  // 262\n                                                                                // 24  // 263\n  // On migration, assemble the data from all the dicts that have been          // 25  // 264\n  // registered.                                                                // 26  // 265\n  Package.reload.Reload._onMigrate('reactive-dict', function () {               // 27  // 266\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                          // 28  // 267\n    var dataToMigrate = {};                                                     // 29  // 268\n                                                                                // 30  // 269\n    for (var dictName in dictsToMigrate)                                        // 31  // 270\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();   // 32  // 271\n                                                                                // 33  // 272\n    return [true, {dicts: dataToMigrate}];                                      // 34  // 273\n  });                                                                           // 35  // 274\n}                                                                               // 36  // 275\n                                                                                // 37  // 276\n//////////////////////////////////////////////////////////////////////////////////     // 277\n                                                                                       // 278\n}).call(this);                                                                         // 279\n                                                                                       // 280\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['reactive-dict'] = {\n  ReactiveDict: ReactiveDict\n};\n\n})();\n","servePath":"/packages/reactive-dict.js","sourceMap":{"version":3,"sources":["/packages/reactive-dict/packages/reactive-dict.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6F","file":"/packages/reactive-dict.js","sourcesContent":["(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/reactive-dict/reactive-dict.js                                      //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n// XXX come up with a serialization method which canonicalizes object key       // 1\n// order, which would allow us to use objects as values for equals.             // 2\nvar stringify = function (value) {                                              // 3\n  if (value === undefined)                                                      // 4\n    return 'undefined';                                                         // 5\n  return EJSON.stringify(value);                                                // 6\n};                                                                              // 7\nvar parse = function (serialized) {                                             // 8\n  if (serialized === undefined || serialized === 'undefined')                   // 9\n    return undefined;                                                           // 10\n  return EJSON.parse(serialized);                                               // 11\n};                                                                              // 12\n                                                                                // 13\nvar changed = function (v) {                                                    // 14\n  v && v.changed();                                                             // 15\n};                                                                              // 16\n                                                                                // 17\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName             // 18\nReactiveDict = function (dictName) {                                            // 19\n  // this.keys: key -> value                                                    // 20\n  if (dictName) {                                                               // 21\n    if (typeof dictName === 'string') {                                         // 22\n      // the normal case, argument is a string name.                            // 23\n      // _registerDictForMigrate will throw an error on duplicate name.         // 24\n      ReactiveDict._registerDictForMigrate(dictName, this);                     // 25\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};               // 26\n      this.name = dictName;                                                     // 27\n    } else if (typeof dictName === 'object') {                                  // 28\n      // back-compat case: dictName is actually migrationData                   // 29\n      this.keys = dictName;                                                     // 30\n    } else {                                                                    // 31\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);            // 32\n    }                                                                           // 33\n  } else {                                                                      // 34\n    // no name given; no migration will be performed                            // 35\n    this.keys = {};                                                             // 36\n  }                                                                             // 37\n                                                                                // 38\n  this.allDeps = new Tracker.Dependency;                                        // 39\n  this.keyDeps = {}; // key -> Dependency                                       // 40\n  this.keyValueDeps = {}; // key -> Dependency                                  // 41\n};                                                                              // 42\n                                                                                // 43\n_.extend(ReactiveDict.prototype, {                                              // 44\n  // set() began as a key/value method, but we are now overloading it           // 45\n  // to take an object of key/value pairs, similar to backbone                  // 46\n  // http://backbonejs.org/#Model-set                                           // 47\n                                                                                // 48\n  set: function (keyOrObject, value) {                                          // 49\n    var self = this;                                                            // 50\n                                                                                // 51\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {           // 52\n      // Called as `dict.set({...})`                                            // 53\n      self._setObject(keyOrObject);                                             // 54\n      return;                                                                   // 55\n    }                                                                           // 56\n    // the input isn't an object, so it must be a key                           // 57\n    // and we resume with the rest of the function                              // 58\n    var key = keyOrObject;                                                      // 59\n                                                                                // 60\n    value = stringify(value);                                                   // 61\n                                                                                // 62\n    var keyExisted = _.has(self.keys, key);                                     // 63\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';         // 64\n    var isNewValue = (value !== oldSerializedValue);                            // 65\n                                                                                // 66\n    self.keys[key] = value;                                                     // 67\n                                                                                // 68\n    if (isNewValue || !keyExisted) {                                            // 69\n      self.allDeps.changed();                                                   // 70\n    }                                                                           // 71\n                                                                                // 72\n    if (isNewValue) {                                                           // 73\n      changed(self.keyDeps[key]);                                               // 74\n      if (self.keyValueDeps[key]) {                                             // 75\n        changed(self.keyValueDeps[key][oldSerializedValue]);                    // 76\n        changed(self.keyValueDeps[key][value]);                                 // 77\n      }                                                                         // 78\n    }                                                                           // 79\n  },                                                                            // 80\n                                                                                // 81\n  setDefault: function (key, value) {                                           // 82\n    var self = this;                                                            // 83\n    if (! _.has(self.keys, key)) {                                              // 84\n      self.set(key, value);                                                     // 85\n    }                                                                           // 86\n  },                                                                            // 87\n                                                                                // 88\n  get: function (key) {                                                         // 89\n    var self = this;                                                            // 90\n    self._ensureKey(key);                                                       // 91\n    self.keyDeps[key].depend();                                                 // 92\n    return parse(self.keys[key]);                                               // 93\n  },                                                                            // 94\n                                                                                // 95\n  equals: function (key, value) {                                               // 96\n    var self = this;                                                            // 97\n                                                                                // 98\n    // Mongo.ObjectID is in the 'mongo' package                                 // 99\n    var ObjectID = null;                                                        // 100\n    if (Package.mongo) {                                                        // 101\n      ObjectID = Package.mongo.Mongo.ObjectID;                                  // 102\n    }                                                                           // 103\n                                                                                // 104\n    // We don't allow objects (or arrays that might include objects) for        // 105\n    // .equals, because JSON.stringify doesn't canonicalize object key          // 106\n    // order. (We can make equals have the right return value by parsing the    // 107\n    // current value and using EJSON.equals, but we won't have a canonical      // 108\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".                            // 110\n    //                                                                          // 111\n    // XXX we could allow arrays as long as we recursively check that there     // 112\n    // are no objects                                                           // 113\n    if (typeof value !== 'string' &&                                            // 114\n        typeof value !== 'number' &&                                            // 115\n        typeof value !== 'boolean' &&                                           // 116\n        typeof value !== 'undefined' &&                                         // 117\n        !(value instanceof Date) &&                                             // 118\n        !(ObjectID && value instanceof ObjectID) &&                             // 119\n        value !== null) {                                                       // 120\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");             // 121\n    }                                                                           // 122\n    var serializedValue = stringify(value);                                     // 123\n                                                                                // 124\n    if (Tracker.active) {                                                       // 125\n      self._ensureKey(key);                                                     // 126\n                                                                                // 127\n      if (! _.has(self.keyValueDeps[key], serializedValue))                     // 128\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;       // 129\n                                                                                // 130\n      var isNew = self.keyValueDeps[key][serializedValue].depend();             // 131\n      if (isNew) {                                                              // 132\n        Tracker.onInvalidate(function () {                                      // 133\n          // clean up [key][serializedValue] if it's now empty, so we don't     // 134\n          // use O(n) memory for n = values seen ever                           // 135\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())        // 136\n            delete self.keyValueDeps[key][serializedValue];                     // 137\n        });                                                                     // 138\n      }                                                                         // 139\n    }                                                                           // 140\n                                                                                // 141\n    var oldValue = undefined;                                                   // 142\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                // 143\n    return EJSON.equals(oldValue, value);                                       // 144\n  },                                                                            // 145\n                                                                                // 146\n  all: function() {                                                             // 147\n    this.allDeps.depend();                                                      // 148\n    var ret = {};                                                               // 149\n    _.each(this.keys, function(value, key) {                                    // 150\n      ret[key] = parse(value);                                                  // 151\n    });                                                                         // 152\n    return ret;                                                                 // 153\n  },                                                                            // 154\n                                                                                // 155\n  clear: function() {                                                           // 156\n    var self = this;                                                            // 157\n                                                                                // 158\n    var oldKeys = self.keys;                                                    // 159\n    self.keys = {};                                                             // 160\n                                                                                // 161\n    self.allDeps.changed();                                                     // 162\n                                                                                // 163\n    _.each(oldKeys, function(value, key) {                                      // 164\n      changed(self.keyDeps[key]);                                               // 165\n      changed(self.keyValueDeps[key][value]);                                   // 166\n      changed(self.keyValueDeps[key]['undefined']);                             // 167\n    });                                                                         // 168\n                                                                                // 169\n  },                                                                            // 170\n                                                                                // 171\n  delete: function(key) {                                                       // 172\n    var self = this;                                                            // 173\n    var didRemove = false;                                                      // 174\n                                                                                // 175\n    if (_.has(self.keys, key)) {                                                // 176\n      var oldValue = self.keys[key];                                            // 177\n      delete self.keys[key];                                                    // 178\n      changed(self.keyDeps[key]);                                               // 179\n      if (self.keyValueDeps[key]) {                                             // 180\n        changed(self.keyValueDeps[key][oldValue]);                              // 181\n        changed(self.keyValueDeps[key]['undefined']);                           // 182\n      }                                                                         // 183\n      self.allDeps.changed();                                                   // 184\n      didRemove = true;                                                         // 185\n    }                                                                           // 186\n                                                                                // 187\n    return didRemove;                                                           // 188\n  },                                                                            // 189\n                                                                                // 190\n  _setObject: function (object) {                                               // 191\n    var self = this;                                                            // 192\n                                                                                // 193\n    _.each(object, function (value, key){                                       // 194\n      self.set(key, value);                                                     // 195\n    });                                                                         // 196\n  },                                                                            // 197\n                                                                                // 198\n  _ensureKey: function (key) {                                                  // 199\n    var self = this;                                                            // 200\n    if (!(key in self.keyDeps)) {                                               // 201\n      self.keyDeps[key] = new Tracker.Dependency;                               // 202\n      self.keyValueDeps[key] = {};                                              // 203\n    }                                                                           // 204\n  },                                                                            // 205\n                                                                                // 206\n  // Get a JSON value that can be passed to the constructor to                  // 207\n  // create a new ReactiveDict with the same contents as this one               // 208\n  _getMigrationData: function () {                                              // 209\n    // XXX sanitize and make sure it's JSONible?                                // 210\n    return this.keys;                                                           // 211\n  }                                                                             // 212\n});                                                                             // 213\n                                                                                // 214\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/reactive-dict/migration.js                                          //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nReactiveDict._migratedDictData = {}; // name -> data                            // 1\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                      // 2\n                                                                                // 3\nReactiveDict._loadMigratedDict = function (dictName) {                          // 4\n  if (_.has(ReactiveDict._migratedDictData, dictName))                          // 5\n    return ReactiveDict._migratedDictData[dictName];                            // 6\n                                                                                // 7\n  return null;                                                                  // 8\n};                                                                              // 9\n                                                                                // 10\nReactiveDict._registerDictForMigrate = function (dictName, dict) {              // 11\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))                            // 12\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);                // 13\n                                                                                // 14\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                // 15\n};                                                                              // 16\n                                                                                // 17\nif (Meteor.isClient && Package.reload) {                                        // 18\n  // Put old migrated data into ReactiveDict._migratedDictData,                 // 19\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                // 20\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');    // 21\n  if (migrationData && migrationData.dicts)                                     // 22\n    ReactiveDict._migratedDictData = migrationData.dicts;                       // 23\n                                                                                // 24\n  // On migration, assemble the data from all the dicts that have been          // 25\n  // registered.                                                                // 26\n  Package.reload.Reload._onMigrate('reactive-dict', function () {               // 27\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                          // 28\n    var dataToMigrate = {};                                                     // 29\n                                                                                // 30\n    for (var dictName in dictsToMigrate)                                        // 31\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();   // 32\n                                                                                // 33\n    return [true, {dicts: dataToMigrate}];                                      // 34\n  });                                                                           // 35\n}                                                                               // 36\n                                                                                // 37\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]